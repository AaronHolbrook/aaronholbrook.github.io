<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-08T00:04:40-05:00</updated><id>http://localhost:4000/</id><title type="html">Holbrook, Inc.</title><subtitle>:zap: Things I've learned. Stuff that matters. :100:</subtitle><author><name>Aaron Holbrook</name></author><entry><title type="html">Programmatically clear your WP Engine cache</title><link href="http://localhost:4000/programmatically-clear-wp-engine-cache" rel="alternate" type="text/html" title="Programmatically clear your WP Engine cache" /><published>2017-06-13T00:00:00-05:00</published><updated>2017-06-13T00:00:00-05:00</updated><id>http://localhost:4000/programmatically-clear-wp-engine-cache</id><content type="html" xml:base="http://localhost:4000/programmatically-clear-wp-engine-cache">&lt;p&gt;In my desire to create a better process for building and deploying at &lt;a href=&quot;http://zeek.com&quot;&gt;Zeek&lt;/a&gt;, I recently hit a road bump while trying to perform automatic visual regression testing immediately after deployment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wpengine.png&quot; alt=&quot;center-aligned-image&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is due to WP Engine’s full page cache.&lt;/p&gt;

&lt;p&gt;Immediately after we deploy our changes, WP Engine’s cache is still showing the old files and has not yet been cleared/flushed/rebuilt. This means our visual acceptance test is testing our &lt;em&gt;pre&lt;/em&gt;-deploy changes.&lt;/p&gt;

&lt;p&gt;This is entirely unacceptable; this means that we won’t know if something is broken until an &lt;em&gt;unknown, later date&lt;/em&gt;. In the world of deploying changes, you want to know immediately if the changes you’ve made had a negative impact, so you can do something about it while you’re around, not later when you’re out on a walk with your family.&lt;/p&gt;

&lt;p&gt;Unfortunately WP Engine currently does not offer a programmatic (i.e. non-manual) solution to this issue.&lt;/p&gt;

&lt;p&gt;And so I built one myself: &lt;a href=&quot;https://github.com/a7/wpe-cache-flush/&quot;&gt;WPE Cache Flush&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I began diving into the code that powers the WP Engine functionality on the site. What I found was the functionality that allows the purge cache button to work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/wpe-purge-cache.png&quot; alt=&quot;center-aligned-image&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then replicated that functionality in my own package and created a webhook listener.&lt;/p&gt;

&lt;p&gt;And now we have a programmatic way to purge the WP Engine cache!&lt;/p&gt;

&lt;p&gt;This is both a WordPress plugin as well as a composer package: &lt;strong&gt;&lt;a href=&quot;https://github.com/a7/wpe-cache-flush/&quot;&gt;WPE Cache Flush&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">In my desire to create a better process for building and deploying at Zeek, I recently hit a road bump while trying to perform automatic visual regression testing immediately after deployment.</summary></entry><entry><title type="html">Simpler loading with Autoload!</title><link href="http://localhost:4000/simpler-loading-with-autoload" rel="alternate" type="text/html" title="Simpler loading with Autoload!" /><published>2015-06-04T00:00:00-05:00</published><updated>2015-06-04T00:00:00-05:00</updated><id>http://localhost:4000/simpler-loading-with-autoload</id><content type="html" xml:base="http://localhost:4000/simpler-loading-with-autoload">&lt;h2 id=&quot;purpose&quot;&gt;Purpose&lt;/h2&gt;
&lt;p&gt;Automatically load all PHP files in the specified directory. Recursively.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Rename files with no fear of breaking &lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; calls&lt;/li&gt;
  &lt;li&gt;Encourages using more files to more cleanly organize code into smaller logical chunks&lt;/li&gt;
  &lt;li&gt;Reduce git merge conflicts with other developers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Install via composer by adding the &lt;a href=&quot;https://packagist.org/packages/aaronholbrook/autoload&quot;&gt;package&lt;/a&gt; to your composer file. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;aaronholbrook/autoload&quot;: &quot;1.*&quot;,&lt;/code&gt; does the trick.&lt;/p&gt;

&lt;p&gt;Be sure to include the regular composer load file via &lt;code class=&quot;highlighter-rouge&quot;&gt;require( __DIR__ . '/vendor/autoload.php' );&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Please note that although similarly named, this Autoload library is meant for loading all PHP files in a given directory. This does &lt;strong&gt;NOT&lt;/strong&gt; function in the manner of the built-in PSR-4 PHP Autoloader.&lt;/p&gt;

&lt;p&gt;Simply load your desired &lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt; or whatever directory by calling:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\AaronHolbrook\Autoload\autoload( __DIR__ . 'includes' );&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;caveats&quot;&gt;Caveats&lt;/h2&gt;
&lt;p&gt;Since this is a recursive loader, you should be conscious of what you’re placing in your autoloaded directory.&lt;/p&gt;

&lt;p&gt;Things I wouldn’t recommend doing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Placing a big (or any) PHP library in the autoloaded directory (this should/could be handled better with &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt; anyways!)&lt;/li&gt;
  &lt;li&gt;Being lax with permissions on a server. Obviously this is never a good idea, but I would be sure that your folder / file permissions are up to snuff (or strange files may be loaded)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-walkthrough&quot;&gt;Video Walkthrough&lt;/h2&gt;
&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/watch?v=NZtwcdIcHZ4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Be aware that this may not be the right choice for your project. Please be fully aware of what this plugin does and how it works.&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AaronHolbrook/autoload&quot;&gt;Github&lt;/a&gt;
&lt;a href=&quot;https://packagist.org/packages/aaronholbrook/autoload&quot;&gt;Packagist&lt;/a&gt;&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">Purpose Automatically load all PHP files in the specified directory. Recursively.</summary></entry><entry><title type="html">New plugin: Seeder</title><link href="http://localhost:4000/new-plugin-seeder" rel="alternate" type="text/html" title="New plugin: Seeder" /><published>2015-06-03T00:00:00-05:00</published><updated>2015-06-03T00:00:00-05:00</updated><id>http://localhost:4000/new-plugin-seeder</id><content type="html" xml:base="http://localhost:4000/new-plugin-seeder">&lt;p&gt;It’s nice to pre-populate terms, content or have the ability to only OCCASIONALLY run actions.&lt;/p&gt;

&lt;p&gt;In the past, I’ve had to manually use special &lt;code class=&quot;highlighter-rouge&quot;&gt;$_GET&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;Not any more! Newly released today is a little library I’m calling Seeder. What it does is provide a simple interface for admins/super admins to fire a special hook. You can easily hook onto that action in order to perform your infrequent or expensive logic.&lt;/p&gt;

&lt;p&gt;This could be anything such as pre-filling content, auto-creating terms, updating the database in a certain manner, talking to or updating an API, etc.&lt;/p&gt;

&lt;p&gt;Check it out on &lt;a href=&quot;https://github.com/AaronHolbrook/seeder&quot;&gt;github&lt;/a&gt; or &lt;a href=&quot;https://packagist.org/packages/aaronholbrook/seeder&quot;&gt;packagist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Extra special thanks to &lt;a href=&quot;http://joshlevinson.me/&quot;&gt;@joshnlevinson&lt;/a&gt; for his work on building the beginning of this and for coining the term of seeding. Thanks Josh!&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">It’s nice to pre-populate terms, content or have the ability to only OCCASIONALLY run actions.</summary></entry><entry><title type="html">Fail Early, Fail Often</title><link href="http://localhost:4000/fail-early-fail-often" rel="alternate" type="text/html" title="Fail Early, Fail Often" /><published>2015-04-07T00:00:00-05:00</published><updated>2015-04-07T00:00:00-05:00</updated><id>http://localhost:4000/fail-early-fail-often</id><content type="html" xml:base="http://localhost:4000/fail-early-fail-often">&lt;p&gt;Make your code simpler to read and simpler to debug by breaking apart your conditional statements and exiting the function whenever possible.&lt;/p&gt;

&lt;p&gt;This helps to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;make your code simpler&lt;/li&gt;
	&lt;li&gt;ensure your functions have one purpose&lt;/li&gt;
	&lt;li&gt;keeps your functions smaller&lt;/li&gt;
	&lt;li&gt;makes your code easier to read&lt;/li&gt;
	&lt;li&gt;makes your code easier to debug&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/watch?v=E0Eph_Cv7SA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">Make your code simpler to read and simpler to debug by breaking apart your conditional statements and exiting the function whenever possible.</summary></entry><entry><title type="html">Developing With Composer</title><link href="http://localhost:4000/developing-with-composer" rel="alternate" type="text/html" title="Developing With Composer" /><published>2015-03-06T00:00:00-06:00</published><updated>2015-03-06T00:00:00-06:00</updated><id>http://localhost:4000/developing-with-composer</id><content type="html" xml:base="http://localhost:4000/developing-with-composer">&lt;p&gt;Did you know you can not only use Composer to manage dependencies, but actually develop a package alongside your dependencies?&lt;/p&gt;

&lt;p&gt;It’s called &lt;a href=&quot;https://getcomposer.org/doc/03-cli.md#install&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--prefer-source&lt;/code&gt;&lt;/a&gt; and boy is it neat.&lt;/p&gt;

&lt;p&gt;The gist of it is this: you define a repository and require the package as you would for a normal dependency, but when you go to run &lt;code class=&quot;highlighter-rouge&quot;&gt;composer install&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;composer update&lt;/code&gt; you pass the flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--prefer-source&lt;/code&gt; along with it.&lt;/p&gt;

&lt;p&gt;This brings down the entire repo of the package, and provided you have access to commit to that repo, you can easily work inside the package and push changes up just as if you were working within a submodule or &lt;a href=&quot;http://www.youtube.com/watch?v=E7YWeRFHpXg&quot;&gt;subtree&lt;/a&gt; (an avenue I explored briefly before discovering this method).&lt;/p&gt;

&lt;p&gt;I’ve recorded a fairly short (10 min) screencast of how to include a package from a private github repository, autoload the main file and use &lt;code class=&quot;highlighter-rouge&quot;&gt;--prefer-source&lt;/code&gt; to be able to make changes directly within the package.&lt;/p&gt;

&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/watch?v=fBJ5_7i06TY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">Did you know you can not only use Composer to manage dependencies, but actually develop a package alongside your dependencies?</summary></entry><entry><title type="html">Git Subtrees - A Primer</title><link href="http://localhost:4000/git-subtrees-primer" rel="alternate" type="text/html" title="Git Subtrees - A Primer" /><published>2015-02-19T00:00:00-06:00</published><updated>2015-02-19T00:00:00-06:00</updated><id>http://localhost:4000/git-subtrees-primer</id><content type="html" xml:base="http://localhost:4000/git-subtrees-primer">&lt;h2&gt;Problem&lt;/h2&gt;

&lt;p&gt;Difficult to modularize code and maintain separate repos. Submodules are difficult or problematic to use.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;Git Subtrees allow you to track and update a repo within a repo without the headache of submodules.&lt;/p&gt;

&lt;p&gt;For a more in depth read on what / why - check out Vinicius’ awesome &lt;a href=&quot;https://medium.com/medium-eng/how-we-modularized-mediums-ios-codebase-8f8f26965c76&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;http://www.youtube.com/watch?v=E7YWeRFHpXg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Add remote to repo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add my-subtree git@github.com:account/project.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add subtree&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git subtree add &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;path/to-repo repo-name branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Push back to subtree’s repo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git subtree push &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;path/to-repo repo-name branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pulling changes from subtree’s repo back to main repo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git subtree pull &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;path/to-repo repo-name branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reference: &lt;a href=&quot;https://medium.com/@v/git-subtrees-a-tutorial-6ff568381844&quot;&gt;https://medium.com/@v/git-subtrees-a-tutorial-6ff568381844&lt;/a&gt;&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">What are subtrees, why are they useful and how can they be used?</summary></entry><entry><title type="html">Testing a Transient Locking Mechanism with Siege</title><link href="http://localhost:4000/testing-transient-locking-mechanism-siege" rel="alternate" type="text/html" title="Testing a Transient Locking Mechanism with Siege" /><published>2014-07-06T00:00:00-05:00</published><updated>2014-07-06T00:00:00-05:00</updated><id>http://localhost:4000/testing-transient-locking-mechanism-siege</id><content type="html" xml:base="http://localhost:4000/testing-transient-locking-mechanism-siege">&lt;p&gt;When working with caching strategies, it’s important to step through your invalidation strategies. Namely, thinking through at what point does the data that you’re caching get regenerated, how does it get regenerated and &lt;em&gt;who&lt;/em&gt; is regenerating it. It could be regenerated any time a new post is published, on a &lt;code class=&quot;highlighter-rouge&quot;&gt;save_post&lt;/code&gt; hook by an author or admin OR it might need to be regenerated every 15 minutes by anyone hitting the front page.&lt;/p&gt;

&lt;p&gt;In the latter case, you want to ensure that at the point where the cache has suddenly expired, you’re not allowing a number of concurrent users to simultaneously make the call for a regeneration of data (which generally is either computationally expensive, is lengthy or both). One way in which we can limit how many people are all slamming the regeneration is to create a short term transient lock. Essentially the idea is, the first user to go through the conditional statement will set a transient lock behind them and will be the only ones to (in my case) make the call to a weather API.&lt;/p&gt;

&lt;p&gt;I wasn’t quite sure if this would be effective or not and so I decided to test my theory using &lt;a href=&quot;http://www.joedog.org/siege-home/&quot;&gt;Siege&lt;/a&gt;, a http load testing and benchmarking utility. If you’ve never used or heard of Siege before, definitely check it out. It’s an amazing tool to have in your arsenal and it makes performance and load testing your site extremely fun.&lt;/p&gt;

&lt;p&gt;I recorded a quick screencast that shows me walking through my testing of the transient lock and I thought I’d share it here.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/watch?v=yKxwlqZMVeo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">When working with caching strategies, it’s important to step through your invalidation strategies. Namely, thinking through at what point does the data that you’re caching get regenerated, how does it get regenerated and who is regenerating it. It could be regenerated any time a new post is published, on a save_post hook by an author or admin OR it might need to be regenerated every 15 minutes by anyone hitting the front page.</summary></entry><entry><title type="html">WordPress Permissions Update Error [RESOLVED]</title><link href="http://localhost:4000/wordpress-permissions-update-error-resolved" rel="alternate" type="text/html" title="WordPress Permissions Update Error [RESOLVED]" /><published>2014-05-31T00:00:00-05:00</published><updated>2014-05-31T00:00:00-05:00</updated><id>http://localhost:4000/wordpress-permissions-update-error-resolved</id><content type="html" xml:base="http://localhost:4000/wordpress-permissions-update-error-resolved">&lt;p&gt;Recently I ran into an issue where an installation of WordPress that had never had any issues updating stopped being able to update via the admin update button.&lt;/p&gt;

&lt;p&gt;Specifically these were the errors I would see:&lt;/p&gt;

&lt;pre&gt;
Unpacking the update...

The update cannot be installed because we will be unable to copy some files. This is usually due to inconsistent file permissions.: wp-admin/includes/update-core.php

Installation Failed

An automated WordPress update has failed to complete&lt;/pre&gt;

&lt;p&gt;The solution as it turns out is to reset the file permissions on the core files.&lt;/p&gt;

&lt;p&gt;Provided you have SSH access to your server, the following commands may fix your issue.&lt;/p&gt;

&lt;p&gt;Reset the permissions of all files to &lt;code class=&quot;highlighter-rouge&quot;&gt;664&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find /path/to/site/ &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;664 &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reset permissions of directories to &lt;code class=&quot;highlighter-rouge&quot;&gt;775&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find /path/to/site/ &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;775 &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reset the group to the &lt;code class=&quot;highlighter-rouge&quot;&gt;wordpress&lt;/code&gt; group (or whatever group makes sense for you)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chgrp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; wordpress /path/to/site/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running those commands I was able to successfully update WordPress with no further issues.&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">Recently I ran into an issue where an installation of WordPress that had never had any issues updating stopped being able to update via the admin update button.</summary></entry><entry><title type="html">Git Bisect</title><link href="http://localhost:4000/troubleshooting-git-bisect" rel="alternate" type="text/html" title="Git Bisect" /><published>2014-03-23T00:00:00-05:00</published><updated>2014-03-23T00:00:00-05:00</updated><id>http://localhost:4000/git-bisect</id><content type="html" xml:base="http://localhost:4000/troubleshooting-git-bisect">&lt;p&gt;One of the lowest hanging fruits to learn is how to fix code regressions quickly and easily with &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s say you have some website that has a bug in a feature that, previously, was working fine (and that this is not all new functionality). We can actually use our version control system to find the exact commit the bug was created.&lt;/p&gt;

&lt;p&gt;Not only can we pinpoint the bug, but &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; allows us to find it faster than if we were to attempt to check out every commit and see if the bug was present or not.&lt;/p&gt;

&lt;p&gt;To begin, let’s run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bisect start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now since, we already know the bug is present, let’s tell &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; that this commit is &lt;code class=&quot;highlighter-rouge&quot;&gt;bad&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bisect&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bad&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now here’s the really slick part - all we need to do is find a commit where the bug is not present. For the sake of argument, let’s say that was 4 months ago and there have been hundreds of commits in between. No sweat, because since we’ll be halving the number of commits we are checking (literally, we are bisecting it each time) we can quickly hone in on which commit introduced the bug.&lt;/p&gt;

&lt;p&gt;So let’s find a good commit (check it out and test to see if the bug is still present). If it is not then we now have our starting point.&lt;/p&gt;

&lt;p&gt;We can now tell &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; that this commit is &lt;code class=&quot;highlighter-rouge&quot;&gt;good&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bisect&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;good&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will begin a process where git will automatically check out the commit that is halfway between the good and bad commits. Simple do a &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect good&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git bisect bad&lt;/code&gt; if the bug is present or not. This will take a few steps, but typically no more than a handful.&lt;/p&gt;

&lt;p&gt;At the end of the process, git will politely tell you which commit introduced the bug. This gives you a really great point to figure out exactly what change has caused the problem.&lt;/p&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">One of the lowest hanging fruits to learn is how to fix code regressions quickly and easily with git bisect.</summary></entry><entry><title type="html">In Which I Drop the Mic</title><link href="http://localhost:4000/in-which-i-drop-the-mic" rel="alternate" type="text/html" title="In Which I Drop the Mic" /><published>2013-07-19T00:00:00-05:00</published><updated>2013-07-19T00:00:00-05:00</updated><id>http://localhost:4000/in-which-i-drop-the-mic</id><content type="html" xml:base="http://localhost:4000/in-which-i-drop-the-mic">&lt;p&gt;The blooper reel and outtakes from an upcoming WordCamp Chicago highlight montage - many thanks to Michelle and Chris from &lt;a href=&quot;http://marktimemedia.com&quot;&gt;Marktime Media&lt;/a&gt; for putting together this awesome video.&lt;/p&gt;

&lt;div class=&quot;responsive-embed responsive-embed-16by9&quot;&gt;
  &lt;iframe src=&quot;http://vimeo.com/70222010&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><author><name>Aaron Holbrook</name></author><summary type="html">The blooper reel and outtakes from an upcoming WordCamp Chicago highlight montage - many thanks to Michelle and Chris from Marktime Media for putting together this awesome video.</summary></entry></feed>